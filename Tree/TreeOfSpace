#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Tree {
    public:
    string data;
    vector<Tree*> children;
    bool isLocked=false;
    int uid = -1;
    Tree(string data) {
        this->data = data;
    }
};

Tree* createTree(int n, int m, vector<string> arr) {
    int it=0;
    Tree* root = new Tree(arr[it]);
    it++;
    queue<Tree*> remaining;
    remaining.push(root);
    while(n!=it) {
        Tree* curr = remaining.front();
        remaining.pop();
        for(int i=0; i<m; i++) {
            if(it < n) {
                Tree* newNode = new Tree(arr[it]);
                it++;
                curr->children.push_back(newNode);
                remaining.push(newNode);
            } else {
                break;
            }
        }
    }
    return root;
}

bool checkDescendants(Tree *root) {
    if(root->isLocked) {
        return false;
    } else {
        bool flag = true;
        for(int i=0; i<root->children.size(); i++) {
            flag = flag & checkDescendants(root->children[i]);
        }
        return flag;
    }
}

bool lock(Tree *root, string node, int id) {
    queue<Tree*> remainingNodes;
    remainingNodes.push(root);
    while(!remainingNodes.empty()) {
        Tree* currNode = remainingNodes.front();
        remainingNodes.pop();
        if(!(currNode->isLocked)) {
            if(currNode->data == node) {
                if(checkDescendants(currNode)) {
                    currNode->isLocked = true;
                    currNode->uid = id;
                    return true;
                }
            } else {
                for(int i=0; i<currNode->children.size(); i++) {
                    remainingNodes.push(currNode->children[i]);
                }
            }
        }
    }
    return false;
}

bool unlock(Tree *root, string node, int id) {
    if(root->data == node) {
        if(root->uid == id) {
            root->uid = -1;
            root->isLocked = false;
            return true;
        }
    }
    if(root->children.size() == 0) {
        return false;
    }
    bool flag = false;
    for(int i=0; i<root->children.size(); i++) {
        flag = unlock(root->children[i], node, id) || flag;
    }
    return flag;
}

bool checkDescendants2(Tree* root, int id) {
    if(root->isLocked && root->uid != id) {
        return false;
    } else {
        bool flag = true;
        for(int i=0; i<root->children.size(); i++) {
            flag = flag && checkDescendants2(root->children[i], id);
        }
        return flag;
    }
}

bool checkDescendants3(Tree* root) {
    if(root->isLocked) {
        return true;
    } else {
        bool flag = false;
        for(int i=0; i<root->children.size(); i++) {
            flag = flag || checkDescendants3(root->children[i]);
        }
        return flag;
    }
}

void updateDescendants(Tree* node) {
    if(node->isLocked) {
        node->uid = -1;
        node->isLocked = false;
    }
    if(node->children.size() == 0) {
        return;
    }
    for(int i=0; i<node->children.size(); i++) {
        updateDescendants(node->children[i]);
    }
}

bool upgrade(Tree* root, string node, int id) {
    if(root->isLocked && root->uid!=id) {
        return false;
    }
    if(root->data == node) {
        if(root->isLocked) {
            return false;
        } else if(checkDescendants3(root) && checkDescendants2(root, id)) {
            updateDescendants(root);
            root->isLocked = true;
            root->uid = id;
            return true;
        } else {
            return false;
        }
    }
    if(root->children.size() == 0) {
        return false;
    }
    bool flag = false;
    for(int i=0; i<root->children.size(); i++) {
        flag = upgrade(root->children[i], node, id) || flag;
    }
    return flag;
}

void printTree(Tree* root) {
    cout << root->data << ", " << root->uid << " - ";
    for(int i=0; i<root->children.size(); i++) {
        cout << root->children[i]->data << ", ";
    }
    cout << endl;
    for(int i=0; i<root->children.size(); i++) {
        printTree(root->children[i]);
    }
    
}

int main()
{
    int n = 3, m = 2;
    vector<string> arr;
    arr.push_back("World");
    arr.push_back("China");
    arr.push_back("India");
    Tree* root = createTree(n, m , arr);
    cout << upgrade(root, "India", 1) << endl;
    cout << lock(root, "World", 9) << endl;
return 0;
}
